package cmds

type Message struct {
	Id        Instruction
	Reply     bool
	ReplySize int
	Size      int
	Data      []byte
}

type Command struct {
	Send    Message
	Receive Message
}

var msgs = [...]Message{
	{Id: PowerOn, Reply: false, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x10, 0xfa}},
	{Id: PowerOff, Reply: false, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x11, 0xfa}},
	{Id: IsPowerOn, Reply: true, ReplySize: 6, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x12, 0xfa}},
	{Id: ReleaseAllServos, Reply: false, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x13, 0xfa}},
	{Id: IsControllerConnected, Reply: true, ReplySize: 6, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x14, 0xfa}},
	{Id: SetFreshMode, Reply: false, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x16, 0x01, 0xfa}},
	{Id: SetFreeMode, Reply: false, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x1a, 0x01, 0xfa}},
	{Id: IsFreeMode, Reply: true, ReplySize: 6, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x1b, 0xfa}},
	{Id: GetAngles, Reply: true, ReplySize: 17, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x20, 0xfa}},
	{Id: SendAngle, Reply: false, Size: 9, Data: []byte{0xfe, 0xfe, 0x06, 0x21, 0x00, 0x00, 0x00, 0x00, 0xfa}},
	{Id: SendAngles, Reply: false, Size: 18, Data: []byte{0xfe, 0xfe, 0x06, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa}},
	{Id: GetCoOrds, Reply: true, ReplySize: 17, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x23, 0xfa}},
	{Id: SendCoOrd, Reply: false, Size: 9, Data: []byte{0xfe, 0xfe, 0x06, 0x24, 0x00, 0x00, 0x00, 0x00, 0xfa}},
	{Id: SendCoOrds, Reply: false, Size: 19, Data: []byte{0xfe, 0xfe, 0x06, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa}},
	{Id: Pause, Reply: false, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x26, 0xfa}},
	{Id: IsPaused, Reply: true, ReplySize: 6, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x27, 0xfa}},
	{Id: Resume, Reply: false, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x28, 0x01, 0xfa}},
	{Id: Stop, Reply: false, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x20, 0xfa}},
	{Id: IsInPosition, Reply: true, ReplySize: 6, Size: 18, Data: []byte{0xfe, 0xfe, 0x06, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa}},
	{Id: IsMoving, Reply: true, ReplySize: 6, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x2b, 0xfa}},
	{Id: JogAngle, Reply: false, Size: 8, Data: []byte{0xfe, 0xfe, 0x05, 0x30, 0x00, 0x00, 0x00, 0xfa}},
	{Id: JogAbsolute, Reply: false, Size: 9, Data: []byte{0xfe, 0xfe, 0x06, 0x31, 0x00, 0x00, 0x00, 0x00, 0xfa}},
	{Id: JogCoOrd, Reply: false, Size: 8, Data: []byte{0xfe, 0xfe, 0x05, 0x32, 0x00, 0x00, 0x00, 0xfa}},
	{Id: JogIncrement, Reply: false, Size: 9, Data: []byte{0xfe, 0xfe, 0x06, 0x33, 0x00, 0x00, 0x00, 0x00, 0xfa}},
	{Id: JogStop, Reply: false, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x34, 0xfa}},
	{Id: SetEncoder, Reply: false, Size: 8, Data: []byte{0xfe, 0xfe, 0x05, 0x3a, 0x00, 0x00, 0x00, 0xfa}},
	{Id: GetEncoder, Reply: true, ReplySize: 7, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x3b, 0x00, 0xfa}},
	{Id: SetEncoders, Reply: false, Size: 18, Data: []byte{0xfe, 0xfe, 0x0f, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa}},
	{Id: GetEncoders, Reply: true, ReplySize: 18, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x3d, 0xfa}},
	{Id: GetSpeed, Reply: true, ReplySize: 6, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x40, 0xfa}},
	{Id: SetSpeed, Reply: false, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x41, 0x01, 0xfa}},
	{Id: GetJointMinAngle, Reply: true, ReplySize: 8, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x4a, 0x00, 0xfa}},
	{Id: GetJointMaxAngle, Reply: true, ReplySize: 8, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x4b, 0x00, 0xfa}},
	{Id: SetJointMin, Reply: false, Size: 8, Data: []byte{0xfe, 0xfe, 0x05, 0x4c, 0x00, 0x00, 0x00, 0xfa}},
	{Id: SetJointMax, Reply: false, Size: 8, Data: []byte{0xfe, 0xfe, 0x05, 0x4d, 0x00, 0x00, 0x00, 0xfa}},
	{Id: IsServoEnable, Reply: true, ReplySize: 7, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x50, 0x00, 0xfa}},
	{Id: IsAllServoEnable, Reply: true, ReplySize: 6, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x51, 0xfa}},
	{Id: GetServoData, Reply: true, ReplySize: 6, Size: 7, Data: []byte{0xfe, 0xfe, 0x04, 0x53, 0x00, 0x00, 0xfa}},
	{Id: SetServoData, Reply: false, Size: 8, Data: []byte{0xfe, 0xfe, 0x05, 0x52, 0x00, 0x00, 0x00, 0xfa}},
	{Id: SetServoCalibration, Reply: false, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x54, 0x00, 0xfa}},
	{Id: JointBrake, Reply: false, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x55, 0x00, 0xfa}},
	{Id: ReleaseServo, Reply: false, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x56, 0x00, 0xfa}},
	{Id: FocusServo, Reply: false, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x57, 0x00, 0xfa}},
	{Id: SetPinMode, Reply: false, Size: 7, Data: []byte{0xfe, 0xfe, 0x04, 0x60, 0x00, 0x00, 0xfa}},
	{Id: SetDigitalOutput, Reply: false, Size: 7, Data: []byte{0xfe, 0xfe, 0x04, 0x61, 0x00, 0x00, 0xfa}},
	{Id: GetDigitalInput, Reply: true, ReplySize: 7, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x61, 0x00, 0xfa}},
	{Id: GetGripperValue, Reply: true, ReplySize: 6, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x65, 0xfa}},
	{Id: SetGripperState, Reply: false, Size: 7, Data: []byte{0xfe, 0xfe, 0x04, 0x66, 0x00, 0x00, 0xfa}},
	{Id: SetGripperValue, Reply: false, Size: 7, Data: []byte{0xfe, 0xfe, 0x04, 0x67, 0x00, 0x00, 0xfa}},
	{Id: SetGripperCalibration, Reply: false, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x68, 0xfa}},
	{Id: IsGripperMoving, Reply: true, ReplySize: 6, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x69, 0xfa}},
	{Id: SetColor, Reply: false, Size: 8, Data: []byte{0xfe, 0xfe, 0x05, 0x6a, 0x00, 0x00, 0x00, 0xfa}},
	{Id: SetGripperState, Reply: false, Size: 7, Data: []byte{0xfe, 0xfe, 0x04, 0x6a, 0x00, 0x00, 0xfa}},
	{Id: SetBasicOutput, Reply: false, Size: 7, Data: []byte{0xfe, 0xfe, 0x04, 0xa0, 0x00, 0x00, 0xfa}},
	{Id: GetBasicInput, Reply: true, ReplySize: 7, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0xa1, 0x00, 0xfa}},
	{Id: SetToolReference, Reply: false, Size: 17, Data: []byte{0xfe, 0xfe, 0x0e, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa}},
	{Id: GetToolReference, Reply: true, ReplySize: 17, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x82, 0xfa}},
	{Id: SetWorldReference, Reply: false, Size: 17, Data: []byte{0xfe, 0xfe, 0x0e, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa}},
	{Id: SetReferenceFrame, Reply: false, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x85, 0x00, 0xfa}},
	{Id: GetReferenceFrame, Reply: true, ReplySize: 6, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x86, 0xfa}},
	{Id: SetEndType, Reply: false, Size: 6, Data: []byte{0xfe, 0xfe, 0x03, 0x89, 0x00, 0xfa}},
	{Id: GetEndType, Reply: true, ReplySize: 6, Size: 5, Data: []byte{0xfe, 0xfe, 0x02, 0x8a, 0xfa}},
}

func NewMessage(msgId Instruction, data []byte) *Message {
	newMsg := new(Message)
	newMsg.Id = msgId
	newMsg.BuildMessageData(data)
	return newMsg
}

func (m *Message) BuildMessageData(data []byte) {
	m.Size = len(data) + 3
	m.Data = make([]byte, m.Size+2)
	m.Data = append(m.Data, byte(Header), byte(Header))
	m.Data = append(m.Data, byte(m.Size))
	m.Data = append(m.Data, data...)
	m.Data = append(m.Data, byte(Footer))
}

func (m *Message) SetMessageData(data []byte) {
	for i := 0; i < len(data); i++ {
		m.Data[i+4] = data[i]
	}
}

func Short2HighLow(short uint16) (byte, byte) {
	return uint8(short >> 8), uint8(short & 0xff)
}

func HighLow2Short(high byte, low byte) uint16 {
	return uint16(low) | uint16(high)<<8
}
